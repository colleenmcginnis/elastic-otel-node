////
Goal of this doc:
The user is able to successfully see data from their Node application make it to the Elastic UI via the Elastic Distribution for OpenTelemetry Node.js

Assumptions we're comfortable making about the reader:
* They are familiar with Elastic
* They are familiar with OpenTelemetry
* They have Node and NPM installed
////

[[get-started]]
== Get started

:language: Node.js
:distro_name: Elastic Distribution for OpenTelemetry {language}

include::release-status.asciidoc[]

This guide shows you how to use the Elastic Distribution for OpenTelemetry {language} ("the distro") to instrument your {language} application and send OpenTelemetry data to an Elastic Observability deployment.

[NOTE]
====
As an OpenTelemetry SDK, the distro supports sending data to any OpenTelemetry protocol (OTLP) endpoint (https://opentelemetry.io/docs/collector/[OpenTelemetry Collector]), but this guide assumes you are sending data to Elastic.
====

////
✅ What the user needs to know and/or do before they install the distro
////
[discrete]
[[get-started-prerequisites]]
=== Prerequisites

Before getting started:

// Familiarity with OpenTelemetry
* *Familiarize yourself with the OpenTelemetry SDK.* The distro is a lightweight wrapper around the OpenTelemetry SDK. You should be broadly familiar with the OpenTelemetry SDK concepts and instrumenting applications using the Microsoft diagnostic APIs. If you are not familiar with this, start with the https://opentelemetry.io/docs/languages/net[OpenTelemetry SDK documentation].
+
// Any dependencies (including supported versions)
* *Check your Node.js version*.
include::supported-technologies.asciidoc[tag=node-version]
+
* *Set up Elastic Observability*. You'll need somewhere to send the gathered OpenTelemetry data, so it can be viewed and analyzed. This doc assumes you're using an https://www.elastic.co/observability[Elastic Observability] cloud deployment. You can use an existing one or set up a new one.
+
[[elastic-observability-setup]]
[%collapsible]
.*Expand for setup instructions*
====
This section shows how to create an https://www.elastic.co/observability[Elastic Observability] cloud deployment and get the data you need to configure the distro to send data to it.

. Register at https://cloud.elastic.co/registration[cloud.elastic.co], if you haven't already. This supports starting **free trial**.
. After registering, click *Create deployment* at `<https://cloud.elastic.co/home>`.
. Once that is created, click *Open* to visit your Kibana home page, e.g. `https://{DEPLOYMENT_NAME}.kb.{REGION}.cloud.es.io/app/home#/getting_started`.
====

////
✅ How to install the distro
////
[discrete]
[[get-started-install]]
=== Install

////
✅ Step-by-step instructions
////
Install the `@elastic/opentelemetry-node` package:

[source,sh]
----
npm install --save @elastic/opentelemetry-node
----

The distro is a single package that includes all the OpenTelemetry JS packages
that are needed for most cases.

// TO DO: refer to advanced section of "start the SDK" when we have that doc.

////
✅ Any additional info related to installation
////
[NOTE]
.The Elastic distro and the OpenTelemetry SDK
====
The distro includes a transitive dependency on the OpenTelemetry SDK, so you do not _need_ to add the OpenTelemetry SDK package to your project directly. However, you _can_ explicitly add the OpenTelemetry SDK as a dependency if you want to opt into newer SDK versions. If you do this, the OpenTelemetry SDK dependency must
be defined _before_ the {distro_name} is defined.
====

////
✅ Start-to-finish operation
////
[discrete]
[[get-started-send-data]]
=== Send data to Elastic

After installing the distro, configure and initialize it to start
sending data to Elastic.

////
Are there any dependencies that need to be installed in addition to the distro?

I think the answer here is no because the dependencies are already defined in the
distro package so the user shouldn't have to individually install any other packages.
If that's true, delete this comment.

[discrete]
[[get-started-add-dependencies]]
==== Add dependencies
////

////
✅ Provide _minimal_ configuration/setup
////
[discrete]
[[get-started-configure]]
==== Configure the distro

////
✅ Step-by-step instructions
////
To configure the distro, at a minimum you'll need the deployment's OTLP endpoint and
authorization data to set the appropriate `OTLP_*` environment variables:

include::configure.asciidoc[tag=minimal-options]

When sending data to Elastic, you can find the values of these variables in Kibana's APM tutorial.
In Kibana:

. Search for _APM Tutorial_
. Scroll down to the _APM Agents_ section and select the *OpenTelemetry* tab
. The appropriate values for `OTEL_EXPORTER_OTLP_ENDPOINT` and
`OTEL_EXPORTER_OTLP_HEADERS` are shown there
+
For example:
+
[source,sh]
----
export OTEL_EXPORTER_OTLP_ENDPOINT=https://my-deployment.apm.us-west1.gcp.cloud.es.io
export OTEL_EXPORTER_OTLP_HEADERS="Authorization=Bearer P....l"
----

image::img/otlp-endpoint-settings.png[Kibana's APM tutorial showing OTel settings]

For more information on all the available configuration options, refer to <<configure>>.

////
✅ Start sending data to Elastic
////
[discrete]
[[get-started-initialization]]
==== Initialize the distro

For the distro to automatically instrument modules used by your Node.js service,
it must be started before you `require` your service code's dependencies --
for example, before `express` or `http` are loaded.

////
✅ Step-by-step instructions
////
The recommended way to get the
distro started is by using the `-r, --require` Node.js
https://nodejs.org/api/cli.html#-r---require-module[CLI option]:

[source,sh]
----
node --require @elastic/opentelemetry-node my-service.js
----

The distro will automatically instrument popular modules (listed in <<supported-technologies>>)
used by your service, and send traces, metrics, and logs telemetry data (using
OTLP) to your configured observability backend.

// TODO: link to a reference section on other ways to start the distro once we have those docs.

////
TO DO:
What should they expect to see after setting up and running the distro?
How do they know it worked as expected?
////
[discrete]
[[get-started-asp-net-core-view-traces]]
=== View traces

To view traces, you can use the Elastic APM UI:

////
TO DO: Step-by-step instructions
////

////
Optional: Add an image
////

////
TO DO:
What should they do next?
////
[discrete]
[[get-started-next-steps]]
=== Next steps

////
// Examples:
//
// See all configuration options
// Learn more about interpreting data
// Other
////

:!language:
:!distro_name:
